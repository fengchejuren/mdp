<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache"  
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="   
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
   		http://www.springframework.org/schema/context 
   		http://www.springframework.org/schema/context/spring-context-3.0.xsd   
   		http://www.springframework.org/schema/aop 
   		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd   
   		http://www.springframework.org/schema/tx 
   		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   		http://www.springframework.org/schema/task 
     	http://www.springframework.org/schema/task/spring-task-3.0.xsd
        http://www.springframework.org/schema/cache 
        http://www.springframework.org/schema/cache/spring-cache-3.0.xsd
        http://www.springframework.org/schema/data/jpa
        http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd">

	<context:annotation-config />
	<context:component-scan base-package="myfirst.dao" />  <!-- 自动扫描所有注解该路径 -->
	<context:component-scan base-package="myfirst.service"></context:component-scan>
	<context:component-scan base-package="myfirst.domain.pojo"></context:component-scan>
	<aop:aspectj-autoproxy proxy-target-class="true"/> 
	<!-- 这个bean没有什么用处,是用来测试spring 通过xml配置文件获取bean的方法 myfirst.test.BeanFactory -->
	<bean id="loginCommand" class="myfirst.domain.vo.LoginCommand">
		<property name="userName" value="llla"></property>
		<property name="password" value="hao2134"></property>
	</bean>
	
	
	<bean id="messageAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!-- Support JSON --> 
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
	    <bean id="exceptionMessageAdapter" class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerExceptionResolver">
        <property name="messageConverters">
            <list>
                <!-- Support JSON --> 
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="org.gjt.mm.mysql.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>	

	<!-- 定义实体管理器工厂 -->
     <bean id="entityManagerFactory" autowire="byName"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        	<property name="dataSource" ref="dataSource"/>
            <property name="packagesToScan" value="myfirst.domain.pojo"/>
            <property name="persistenceProvider" >
            	<bean class="org.hibernate.ejb.HibernatePersistence"/> 
            </property>	
            <property name="jpaVendorAdapter">
            	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
            		<property name="generateDdl" value="false"></property>
            		<property name="database" value="MYSQL"/>
                	<property name="databasePlatform" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
                	<property name="showSql" value="true"/> 
            	</bean>
            </property>  
      		<property name="jpaDialect">
            	<bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect"/>
        	</property> 
           
            <property name="jpaPropertyMap">
            	<map>
                <entry key="hibernate.query.substitutions" value="true 1, false 0"/>
                <entry key="hibernate.default_batch_fetch_size" value="16"/>
                <entry key="hibernate.max_fetch_depth" value="2"/>
                <entry key="hibernate.generate_statistics" value="true"/>
                <entry key="hibernate.bytecode.use_reflection_optimizer" value="true"/>
                <entry key="hibernate.cache.use_second_level_cache" value="false"/>
                <entry key="hibernate.cache.use_query_cache" value="false"/>
            </map> 
           </property>
    </bean> 
    <!-- 配置事务管理器 -->  
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">  
     	<property name="entityManagerFactory" ref="entityManagerFactory" />  
    </bean> 
    <!-- 启用 annotation事务--> 
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/> 
    <jpa:repositories base-package="myfirst.repository" 
    		repository-impl-postfix="Impl"
            entity-manager-factory-ref="entityManagerFactory"
            transaction-manager-ref="transactionManager">
    </jpa:repositories>    
    <tx:advice id="mytx"> 
     <tx:attributes> 
         <tx:method name="add*"    propagation="REQUIRED" /> 
         <tx:method name="del*"    propagation="REQUIRED" /> 
         <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"/> 
         <tx:method name="*"       propagation="SUPPORTS" read-only="true"/> 
     </tx:attributes> 
	</tx:advice> 

    <!-- 织入 --> 
    <aop:config> 
       <aop:advisor advice-ref="mytx" pointcut="execution(* myfirst.service.*.*(..) )"/> 
    </aop:config>	          

	<!-- 定时器，抓取网页新闻时用到 -->
	<task:scheduler id="scheduler" pool-size="10"/>
	<task:executor id="executor" keep-alive="3600" pool-size="100-200" 
		queue-capacity="500" rejection-policy="CALLER_RUNS" /> 
	<task:annotation-driven executor="executor" scheduler="scheduler"/>	
	
</beans>
